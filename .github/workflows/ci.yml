name: 🧪 CI - Tests & Quality

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:

jobs:
  test:
    name: 🧪 Tests (Python ${{ matrix.python-version }}, ${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]
        python-version: ['3.11', '3.12', '3.13']
        exclude:
          - os: macos-latest
            python-version: '3.12'
          - os: macos-latest
            python-version: '3.13'
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
      
      - name: 🐍 Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      
      - name: 📦 Install UV
        uses: astral-sh/setup-uv@v4
        with:
          enable-cache: true
      
      - name: 📦 Install dependencies
        run: |
          uv venv
          uv pip install -e ".[dev]"
      
      - name: 🧪 Run tests
        run: |
          source .venv/bin/activate
          pytest tests/ \
            --cov=src/pyvider_cty \
            --cov-report=xml \
            --cov-report=term \
            -n auto \
            -v
      
      - name: 📊 Upload coverage to Codecov
        if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.11'
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: ./coverage.xml
          flags: unittests
          name: codecov-pyvider-cty
          fail_ci_if_error: false

  quality:
    name: 🔧 Code Quality
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
      
      - name: 🐍 Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      
      - name: 📦 Install UV
        uses: astral-sh/setup-uv@v4
        with:
          enable-cache: true
      
      - name: 📦 Install dependencies
        run: |
          uv venv
          uv pip install -e ".[dev]"
      
      - name: 🎨 Check code formatting with Ruff
        run: |
          source .venv/bin/activate
          ruff format --check src/ tests/
      
      - name: 🔍 Lint with Ruff
        run: |
          source .venv/bin/activate
          ruff check src/ tests/
      
      - name: 🔒 Type check with MyPy
        run: |
          source .venv/bin/activate
          mypy src/ --ignore-missing-imports || true
      
      - name: 🔒 Security check with Bandit
        run: |
          source .venv/bin/activate
          bandit -r src/ -ll || true

  build:
    name: 📦 Build Package
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
      
      - name: 🐍 Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      
      - name: 📦 Install UV
        uses: astral-sh/setup-uv@v4
        with:
          enable-cache: true
      
      - name: 🔨 Build distribution
        run: |
          uv build
      
      - name: 📤 Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist/

  integration:
    name: 🔗 Integration Tests
    runs-on: ubuntu-latest
    needs: [test, quality]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
      
      - name: 🐍 Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      
      - name: 📦 Install UV
        uses: astral-sh/setup-uv@v4
        with:
          enable-cache: true
      
      - name: 📦 Install package
        run: |
          uv venv
          uv pip install -e ".[dev]"
      
      - name: 🧪 Run integration tests
        run: |
          source .venv/bin/activate
          pytest tests/ -m integration -v || true