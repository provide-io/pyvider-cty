name: 🚀 Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      branch:
        description: 'Branch to build from'
        required: false
        default: 'main'
        type: string
      version:
        description: 'Version to release (e.g., 0.0.114) - leave empty for auto-post versioning'
        required: false
        type: string
      publish_testpypi:
        description: 'Publish to TestPyPI'
        required: false
        default: true
        type: boolean
      publish_pypi:
        description: 'Publish to PyPI'
        required: false
        default: false
        type: boolean

permissions:
  contents: write
  id-token: write  # Required for trusted publishing

jobs:
  build:
    name: 📦 Build Distribution
    runs-on: ubuntu-latest

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.branch || github.ref }}

      - name: 🔖 Generate TestPyPI Version
        if: inputs.publish_testpypi && !inputs.version
        uses: provide-io/ci-tooling/actions/generate-testpypi-version@main
        id: post-version
        with:
          package-name: 'pyvider-cty'

      - name: 🔐 Parse Organization Helpers
        uses: provide-io/ci-tooling/actions/parse-org-helpers@main
        env:
          GH_ORG_HELPERS: ${{ secrets.GH_ORG_HELPERS }}

      - name: 🔐 Setup GitHub Auth
        uses: provide-io/ci-tooling/actions/setup-github-auth@main
        env:
          GH_ORG_HELPERS: ${{ secrets.GH_ORG_HELPERS }}

      - name: 🐍 Setup Python Environment
        uses: provide-io/ci-tooling/actions/setup-python-env@v0.2.3
        with:
          python-version: '3.11'
          install-extras: 'dev'

      - name: 📝 Update version in pyproject.toml
        if: inputs.version || steps.post-version.outputs.deploy-version
        run: |
          VERSION="${{ inputs.version || steps.post-version.outputs.deploy-version }}"
          echo "📝 Setting version to: $VERSION"
          sed -i.bak "s/^version = .*/version = \"$VERSION\"/" pyproject.toml
          cat pyproject.toml | grep "^version ="

      - name: 🔨 Build package
        uses: provide-io/ci-tooling/actions/python-build@v0.2.3
      
      - name: 📤 Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist/

  test-release:
    name: 🧪 Test Release (TestPyPI)
    needs: build
    runs-on: ubuntu-latest
    if: inputs.publish_testpypi || github.event_name == 'push'
    permissions:
      id-token: write  # Required for trusted publishing

    steps:
      - name: 📥 Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist/

      - name: 📤 Publish to TestPyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          repository-url: https://test.pypi.org/legacy/
          skip-existing: true

  release:
    name: 🚀 Release to PyPI
    needs: build
    runs-on: ubuntu-latest
    if: inputs.publish_pypi || startsWith(github.ref, 'refs/tags/')

    steps:
      - name: 📥 Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist/

      - name: 📤 Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.PYPI_API_TOKEN }}

  github-release:
    name: 📝 Create GitHub Release
    needs: release
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
      
      - name: 📥 Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist/
      
      - name: 📝 Create Release
        uses: softprops/action-gh-release@v2
        with:
          files: dist/*
          generate_release_notes: true
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}