
tests/performance/test_full_performance_suite.py::test_benchmark_unify_performance [32mPASSED[0m[32m [ 14%][0m
tests/performance/test_full_performance_suite.py::test_benchmark_infer_type_performance [31mFAILED[0m[31m [ 28%][0m
tests/performance/test_full_performance_suite.py::test_benchmark_validation_performance [31mFAILED[0m[31m [ 42%][0m
tests/performance/test_full_performance_suite.py::test_benchmark_serialization_performance [31mERROR[0m[31m [ 57%][0m
tests/performance/test_full_performance_suite.py::test_benchmark_deserialization_performance [31mERROR[0m[31m [ 71%][0m
tests/performance/test_full_performance_suite.py::test_benchmark_to_native_performance [31mERROR[0m[31m [ 85%][0m
tests/performance/test_full_performance_suite.py::test_benchmark_full_round_trip [31mFAILED[0m[31m [100%][0m

==================================== ERRORS ====================================
[31m[1m__________ ERROR at setup of test_benchmark_serialization_performance __________[0m

complex_raw_data = {'config': {'metadata': {'nested': {'tags': ['a', 'b'], 'value': True}, 'source': 'benchmark'}, 'params': [10, 20.5, 3...{'x': 2, 'y': 4}, {'x': 3, 'y': 6}, {'x': 4, 'y': 8}, {'x': 5, 'y': 10}, ...], 'enabled': True, 'id': 'item-_COMPLEX_'}

    [0m[37m@pytest[39;49;00m.fixture(scope=[33m"[39;49;00m[33mmodule[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
    [94mdef[39;49;00m[90m [39;49;00m[92mvalidated_complex_cty_value[39;49;00m(complex_raw_data):[90m[39;49;00m
    [90m    [39;49;00m[33m"""Provides a validated CtyValue corresponding to the raw data."""[39;49;00m[90m[39;49;00m
>       schema = infer_cty_type_from_raw(complex_raw_data)[90m[39;49;00m
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^[90m[39;49;00m

[1m[31mtests/performance/test_full_performance_suite.py[0m:51: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31msrc/pyvider/cty/conversion/raw_to_cty.py[0m:38: in wrapper
    [0m[94mreturn[39;49;00m cached_func(*hashable_args, hashable_kwargs_frozenset=hashable_kwargs)[90m[39;49;00m
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^[90m[39;49;00m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

hashable_args = (frozenset({('config', frozenset({('metadata', frozenset({(...), (...)})), ('params', (10, 20.5, 30, 40, 50)), ('ports...ozenset({('x', 4), ('y', 8)}), frozenset({('x', 5), ('y', 10)}), ...)), ('enabled', True), ('id', 'item-_COMPLEX_')}),)
hashable_kwargs_frozenset = {'hashable_kwargs_frozenset': frozenset()}

    [0m[37m@lru_cache[39;49;00m(maxsize=maxsize)[90m[39;49;00m
    [94mdef[39;49;00m[90m [39;49;00m[92mcached_func[39;49;00m(*hashable_args, **hashable_kwargs_frozenset):[90m[39;49;00m
        [90m# We reconstruct the kwargs dict here as lru_cache cannot handle frozenset directly[39;49;00m[90m[39;49;00m
        [90m# in its signature, but it can cache it perfectly fine.[39;49;00m[90m[39;49;00m
>       [94mreturn[39;49;00m func(*hashable_args, **[96mdict[39;49;00m(hashable_kwargs_frozenset))[90m[39;49;00m
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^[90m[39;49;00m
[1m[31mE       TypeError: infer_cty_type_from_raw() got an unexpected keyword argument 'hashable_kwargs_frozenset'[0m

[1m[31msrc/pyvider/cty/conversion/raw_to_cty.py[0m:24: TypeError
[31m[1m_________ ERROR at setup of test_benchmark_deserialization_performance _________[0m

complex_raw_data = {'config': {'metadata': {'nested': {'tags': ['a', 'b'], 'value': True}, 'source': 'benchmark'}, 'params': [10, 20.5, 3...{'x': 2, 'y': 4}, {'x': 3, 'y': 6}, {'x': 4, 'y': 8}, {'x': 5, 'y': 10}, ...], 'enabled': True, 'id': 'item-_COMPLEX_'}

    [0m[37m@pytest[39;49;00m.fixture(scope=[33m"[39;49;00m[33mmodule[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
    [94mdef[39;49;00m[90m [39;49;00m[92mvalidated_complex_cty_value[39;49;00m(complex_raw_data):[90m[39;49;00m
    [90m    [39;49;00m[33m"""Provides a validated CtyValue corresponding to the raw data."""[39;49;00m[90m[39;49;00m
>       schema = infer_cty_type_from_raw(complex_raw_data)[90m[39;49;00m
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^[90m[39;49;00m

[1m[31mtests/performance/test_full_performance_suite.py[0m:51: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31msrc/pyvider/cty/conversion/raw_to_cty.py[0m:38: in wrapper
    [0m[94mreturn[39;49;00m cached_func(*hashable_args, hashable_kwargs_frozenset=hashable_kwargs)[90m[39;49;00m
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^[90m[39;49;00m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

hashable_args = (frozenset({('config', frozenset({('metadata', frozenset({(...), (...)})), ('params', (10, 20.5, 30, 40, 50)), ('ports...ozenset({('x', 4), ('y', 8)}), frozenset({('x', 5), ('y', 10)}), ...)), ('enabled', True), ('id', 'item-_COMPLEX_')}),)
hashable_kwargs_frozenset = {'hashable_kwargs_frozenset': frozenset()}

    [0m[37m@lru_cache[39;49;00m(maxsize=maxsize)[90m[39;49;00m
    [94mdef[39;49;00m[90m [39;49;00m[92mcached_func[39;49;00m(*hashable_args, **hashable_kwargs_frozenset):[90m[39;49;00m
        [90m# We reconstruct the kwargs dict here as lru_cache cannot handle frozenset directly[39;49;00m[90m[39;49;00m
        [90m# in its signature, but it can cache it perfectly fine.[39;49;00m[90m[39;49;00m
>       [94mreturn[39;49;00m func(*hashable_args, **[96mdict[39;49;00m(hashable_kwargs_frozenset))[90m[39;49;00m
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^[90m[39;49;00m
[1m[31mE       TypeError: infer_cty_type_from_raw() got an unexpected keyword argument 'hashable_kwargs_frozenset'[0m

[1m[31msrc/pyvider/cty/conversion/raw_to_cty.py[0m:24: TypeError
[31m[1m____________ ERROR at setup of test_benchmark_to_native_performance ____________[0m

complex_raw_data = {'config': {'metadata': {'nested': {'tags': ['a', 'b'], 'value': True}, 'source': 'benchmark'}, 'params': [10, 20.5, 3...{'x': 2, 'y': 4}, {'x': 3, 'y': 6}, {'x': 4, 'y': 8}, {'x': 5, 'y': 10}, ...], 'enabled': True, 'id': 'item-_COMPLEX_'}

    [0m[37m@pytest[39;49;00m.fixture(scope=[33m"[39;49;00m[33mmodule[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
    [94mdef[39;49;00m[90m [39;49;00m[92mvalidated_complex_cty_value[39;49;00m(complex_raw_data):[90m[39;49;00m
    [90m    [39;49;00m[33m"""Provides a validated CtyValue corresponding to the raw data."""[39;49;00m[90m[39;49;00m
>       schema = infer_cty_type_from_raw(complex_raw_data)[90m[39;49;00m
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^[90m[39;49;00m

[1m[31mtests/performance/test_full_performance_suite.py[0m:51: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31msrc/pyvider/cty/conversion/raw_to_cty.py[0m:38: in wrapper
    [0m[94mreturn[39;49;00m cached_func(*hashable_args, hashable_kwargs_frozenset=hashable_kwargs)[90m[39;49;00m
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^[90m[39;49;00m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

hashable_args = (frozenset({('config', frozenset({('metadata', frozenset({(...), (...)})), ('params', (10, 20.5, 30, 40, 50)), ('ports...ozenset({('x', 4), ('y', 8)}), frozenset({('x', 5), ('y', 10)}), ...)), ('enabled', True), ('id', 'item-_COMPLEX_')}),)
hashable_kwargs_frozenset = {'hashable_kwargs_frozenset': frozenset()}

    [0m[37m@lru_cache[39;49;00m(maxsize=maxsize)[90m[39;49;00m
    [94mdef[39;49;00m[90m [39;49;00m[92mcached_func[39;49;00m(*hashable_args, **hashable_kwargs_frozenset):[90m[39;49;00m
        [90m# We reconstruct the kwargs dict here as lru_cache cannot handle frozenset directly[39;49;00m[90m[39;49;00m
        [90m# in its signature, but it can cache it perfectly fine.[39;49;00m[90m[39;49;00m
>       [94mreturn[39;49;00m func(*hashable_args, **[96mdict[39;49;00m(hashable_kwargs_frozenset))[90m[39;49;00m
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^[90m[39;49;00m
[1m[31mE       TypeError: infer_cty_type_from_raw() got an unexpected keyword argument 'hashable_kwargs_frozenset'[0m

[1m[31msrc/pyvider/cty/conversion/raw_to_cty.py[0m:24: TypeError
=================================== FAILURES ===================================
[31m[1m____________________ test_benchmark_infer_type_performance _____________________[0m

benchmark = <pytest_benchmark.fixture.BenchmarkFixture object at 0x1034474d0>
complex_raw_data = {'config': {'metadata': {'nested': {'tags': ['a', 'b'], 'value': True}, 'source': 'benchmark'}, 'params': [10, 20.5, 3...{'x': 2, 'y': 4}, {'x': 3, 'y': 6}, {'x': 4, 'y': 8}, {'x': 5, 'y': 10}, ...], 'enabled': True, 'id': 'item-_COMPLEX_'}

    [0m[37m@pytest[39;49;00m.mark.benchmark[90m[39;49;00m
    [94mdef[39;49;00m[90m [39;49;00m[92mtest_benchmark_infer_type_performance[39;49;00m(benchmark, complex_raw_data):[90m[39;49;00m
    [90m    [39;49;00m[33m"""[2/7] Measures `infer_cty_type_from_raw` on the SAME complex object."""[39;49;00m[90m[39;49;00m
        [90m# This correctly tests the cache by calling the function repeatedly[39;49;00m[90m[39;49;00m
        [90m# on the same input object within the benchmark loop.[39;49;00m[90m[39;49;00m
>       benchmark(infer_cty_type_from_raw, complex_raw_data)[90m[39;49;00m

[1m[31mtests/performance/test_full_performance_suite.py[0m:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31m.venv/lib/python3.13/site-packages/pytest_benchmark/fixture.py[0m:156: in __call__
    [0m[94mreturn[39;49;00m [96mself[39;49;00m._raw(function_to_benchmark, *args, **kwargs)[90m[39;49;00m
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^[90m[39;49;00m
[1m[31m.venv/lib/python3.13/site-packages/pytest_benchmark/fixture.py[0m:180: in _raw
    [0mduration, iterations, loops_range = [96mself[39;49;00m._calibrate_timer(runner)[90m[39;49;00m
                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^[90m[39;49;00m
[1m[31m.venv/lib/python3.13/site-packages/pytest_benchmark/fixture.py[0m:318: in _calibrate_timer
    [0mduration = runner(loops_range)[90m[39;49;00m
               ^^^^^^^^^^^^^^^^^^^[90m[39;49;00m
[1m[31m.venv/lib/python3.13/site-packages/pytest_benchmark/fixture.py[0m:109: in runner
    [0mfunction_to_benchmark(*args, **kwargs)[90m[39;49;00m
[1m[31msrc/pyvider/cty/conversion/raw_to_cty.py[0m:38: in wrapper
    [0m[94mreturn[39;49;00m cached_func(*hashable_args, hashable_kwargs_frozenset=hashable_kwargs)[90m[39;49;00m
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^[90m[39;49;00m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

hashable_args = (frozenset({('config', frozenset({('metadata', frozenset({(...), (...)})), ('params', (10, 20.5, 30, 40, 50)), ('ports...ozenset({('x', 4), ('y', 8)}), frozenset({('x', 5), ('y', 10)}), ...)), ('enabled', True), ('id', 'item-_COMPLEX_')}),)
hashable_kwargs_frozenset = {'hashable_kwargs_frozenset': frozenset()}

    [0m[37m@lru_cache[39;49;00m(maxsize=maxsize)[90m[39;49;00m
    [94mdef[39;49;00m[90m [39;49;00m[92mcached_func[39;49;00m(*hashable_args, **hashable_kwargs_frozenset):[90m[39;49;00m
        [90m# We reconstruct the kwargs dict here as lru_cache cannot handle frozenset directly[39;49;00m[90m[39;49;00m
        [90m# in its signature, but it can cache it perfectly fine.[39;49;00m[90m[39;49;00m
>       [94mreturn[39;49;00m func(*hashable_args, **[96mdict[39;49;00m(hashable_kwargs_frozenset))[90m[39;49;00m
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^[90m[39;49;00m
[1m[31mE       TypeError: infer_cty_type_from_raw() got an unexpected keyword argument 'hashable_kwargs_frozenset'[0m

[1m[31msrc/pyvider/cty/conversion/raw_to_cty.py[0m:24: TypeError
[31m[1m____________________ test_benchmark_validation_performance _____________________[0m

benchmark = <pytest_benchmark.fixture.BenchmarkFixture object at 0x103447c50>
complex_raw_data = {'config': {'metadata': {'nested': {'tags': ['a', 'b'], 'value': True}, 'source': 'benchmark'}, 'params': [10, 20.5, 3...{'x': 2, 'y': 4}, {'x': 3, 'y': 6}, {'x': 4, 'y': 8}, {'x': 5, 'y': 10}, ...], 'enabled': True, 'id': 'item-_COMPLEX_'}

    [0m[37m@pytest[39;49;00m.mark.benchmark[90m[39;49;00m
    [94mdef[39;49;00m[90m [39;49;00m[92mtest_benchmark_validation_performance[39;49;00m(benchmark, complex_raw_data):[90m[39;49;00m
    [90m    [39;49;00m[33m"""[3/7] Measures schema validation, which implicitly uses inference."""[39;49;00m[90m[39;49;00m
        [90m# Since validation of raw data calls infer_cty_type_from_raw,[39;49;00m[90m[39;49;00m
        [90m# this benchmark should also see a significant speedup from caching.[39;49;00m[90m[39;49;00m
>       schema = infer_cty_type_from_raw(complex_raw_data)[90m[39;49;00m
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^[90m[39;49;00m

[1m[31mtests/performance/test_full_performance_suite.py[0m:74: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31msrc/pyvider/cty/conversion/raw_to_cty.py[0m:38: in wrapper
    [0m[94mreturn[39;49;00m cached_func(*hashable_args, hashable_kwargs_frozenset=hashable_kwargs)[90m[39;49;00m
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^[90m[39;49;00m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

hashable_args = (frozenset({('config', frozenset({('metadata', frozenset({(...), (...)})), ('params', (10, 20.5, 30, 40, 50)), ('ports...ozenset({('x', 4), ('y', 8)}), frozenset({('x', 5), ('y', 10)}), ...)), ('enabled', True), ('id', 'item-_COMPLEX_')}),)
hashable_kwargs_frozenset = {'hashable_kwargs_frozenset': frozenset()}

    [0m[37m@lru_cache[39;49;00m(maxsize=maxsize)[90m[39;49;00m
    [94mdef[39;49;00m[90m [39;49;00m[92mcached_func[39;49;00m(*hashable_args, **hashable_kwargs_frozenset):[90m[39;49;00m
        [90m# We reconstruct the kwargs dict here as lru_cache cannot handle frozenset directly[39;49;00m[90m[39;49;00m
        [90m# in its signature, but it can cache it perfectly fine.[39;49;00m[90m[39;49;00m
>       [94mreturn[39;49;00m func(*hashable_args, **[96mdict[39;49;00m(hashable_kwargs_frozenset))[90m[39;49;00m
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^[90m[39;49;00m
[1m[31mE       TypeError: infer_cty_type_from_raw() got an unexpected keyword argument 'hashable_kwargs_frozenset'[0m

[1m[31msrc/pyvider/cty/conversion/raw_to_cty.py[0m:24: TypeError
[31m[1m________________________ test_benchmark_full_round_trip ________________________[0m

benchmark = <pytest_benchmark.fixture.BenchmarkFixture object at 0x1034636f0>
complex_raw_data = {'config': {'metadata': {'nested': {'tags': ['a', 'b'], 'value': True}, 'source': 'benchmark'}, 'params': [10, 20.5, 3...{'x': 2, 'y': 4}, {'x': 3, 'y': 6}, {'x': 4, 'y': 8}, {'x': 5, 'y': 10}, ...], 'enabled': True, 'id': 'item-_COMPLEX_'}

    [0m[37m@pytest[39;49;00m.mark.benchmark[90m[39;49;00m
    [94mdef[39;49;00m[90m [39;49;00m[92mtest_benchmark_full_round_trip[39;49;00m(benchmark, complex_raw_data):[90m[39;49;00m
    [90m    [39;49;00m[33m"""[39;49;00m
    [33m    [7/7] Measures the full, real-world round-trip performance:[39;49;00m
    [33m    validate -> serialize -> deserialize -> convert_to_native[39;49;00m
    [33m    """[39;49;00m[90m[39;49;00m
        schema = CtyDynamic() [90m# Use dynamic for the most general case[39;49;00m[90m[39;49;00m
        [94mdef[39;49;00m[90m [39;49;00m[92mround_trip_operation[39;49;00m():[90m[39;49;00m
            [90m# 1. Validate (includes type inference)[39;49;00m[90m[39;49;00m
            cty_val = schema.validate(complex_raw_data)[90m[39;49;00m
            [90m# 2. Serialize[39;49;00m[90m[39;49;00m
            packed = cty_to_msgpack(cty_val, schema)[90m[39;49;00m
            [90m# 3. Deserialize[39;49;00m[90m[39;49;00m
            unpacked_val = cty_from_msgpack(packed, schema)[90m[39;49;00m
            [90m# 4. Convert back to native[39;49;00m[90m[39;49;00m
            _ = cty_to_native(unpacked_val)[90m[39;49;00m
    [90m[39;49;00m
>       benchmark(round_trip_operation)[90m[39;49;00m

[1m[31mtests/performance/test_full_performance_suite.py[0m:112: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31m.venv/lib/python3.13/site-packages/pytest_benchmark/fixture.py[0m:156: in __call__
    [0m[94mreturn[39;49;00m [96mself[39;49;00m._raw(function_to_benchmark, *args, **kwargs)[90m[39;49;00m
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^[90m[39;49;00m
[1m[31m.venv/lib/python3.13/site-packages/pytest_benchmark/fixture.py[0m:180: in _raw
    [0mduration, iterations, loops_range = [96mself[39;49;00m._calibrate_timer(runner)[90m[39;49;00m
                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^[90m[39;49;00m
[1m[31m.venv/lib/python3.13/site-packages/pytest_benchmark/fixture.py[0m:318: in _calibrate_timer
    [0mduration = runner(loops_range)[90m[39;49;00m
               ^^^^^^^^^^^^^^^^^^^[90m[39;49;00m
[1m[31m.venv/lib/python3.13/site-packages/pytest_benchmark/fixture.py[0m:109: in runner
    [0mfunction_to_benchmark(*args, **kwargs)[90m[39;49;00m
[1m[31mtests/performance/test_full_performance_suite.py[0m:104: in round_trip_operation
    [0mcty_val = schema.validate(complex_raw_data)[90m[39;49;00m
              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^[90m[39;49;00m
[1m[31msrc/pyvider/cty/types/structural/dynamic.py[0m:49: in validate
    [0minferred_type = infer_cty_type_from_raw(value)[90m[39;49;00m
                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^[90m[39;49;00m
[1m[31msrc/pyvider/cty/conversion/raw_to_cty.py[0m:38: in wrapper
    [0m[94mreturn[39;49;00m cached_func(*hashable_args, hashable_kwargs_frozenset=hashable_kwargs)[90m[39;49;00m
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^[90m[39;49;00m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

hashable_args = (frozenset({('config', frozenset({('metadata', frozenset({(...), (...)})), ('params', (10, 20.5, 30, 40, 50)), ('ports...ozenset({('x', 4), ('y', 8)}), frozenset({('x', 5), ('y', 10)}), ...)), ('enabled', True), ('id', 'item-_COMPLEX_')}),)
hashable_kwargs_frozenset = {'hashable_kwargs_frozenset': frozenset()}

    [0m[37m@lru_cache[39;49;00m(maxsize=maxsize)[90m[39;49;00m
    [94mdef[39;49;00m[90m [39;49;00m[92mcached_func[39;49;00m(*hashable_args, **hashable_kwargs_frozenset):[90m[39;49;00m
        [90m# We reconstruct the kwargs dict here as lru_cache cannot handle frozenset directly[39;49;00m[90m[39;49;00m
        [90m# in its signature, but it can cache it perfectly fine.[39;49;00m[90m[39;49;00m
>       [94mreturn[39;49;00m func(*hashable_args, **[96mdict[39;49;00m(hashable_kwargs_frozenset))[90m[39;49;00m
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^[90m[39;49;00m
[1m[31mE       TypeError: infer_cty_type_from_raw() got an unexpected keyword argument 'hashable_kwargs_frozenset'[0m

[1m[31msrc/pyvider/cty/conversion/raw_to_cty.py[0m:24: TypeError
[33m=============================== warnings summary ===============================[0m
tests/performance/test_full_performance_suite.py::test_benchmark_validation_performance
  tests/performance/test_full_performance_suite.py:69: PytestBenchmarkWarning: Benchmark fixture was not used at all in this test!
    @pytest.mark.benchmark

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html

[33m----------------------------------------------------------- benchmark: 1 tests -----------------------------------------------------------[0m
Name (time in us)                         Min         Max      Mean   StdDev    Median     IQR  Outliers  OPS (Kops/s)  Rounds  Iterations
[33m------------------------------------------------------------------------------------------------------------------------------------------[0m
test_benchmark_unify_performance   [1m  263.2502[0m[1m  1,192.4591[0m[1m  270.9370[0m[1m  21.4152[0m[1m  265.2090[0m[1m  6.7501[0m   180;334[1m        3.6909[0m    3128           1
[33m------------------------------------------------------------------------------------------------------------------------------------------[0m

Legend:
  Outliers: 1 Standard Deviation from Mean; 1.5 IQR (InterQuartile Range) from 1st Quartile and 3rd Quartile.
  OPS: Operations Per Second, computed as 1 / Mean
[36m[1m=========================== short test summary info ============================[0m
[31mERROR[0m tests/performance/test_full_performance_suite.py::[1mtest_benchmark_serialization_performance[0m - TypeError: infer_cty_type_from_raw() got an unexpected keyword argument 'ha...
[31mERROR[0m tests/performance/test_full_performance_suite.py::[1mtest_benchmark_deserialization_performance[0m - TypeError: infer_cty_type_from_raw() got an unexpected keyword argument 'ha...
[31mERROR[0m tests/performance/test_full_performance_suite.py::[1mtest_benchmark_to_native_performance[0m - TypeError: infer_cty_type_from_raw() got an unexpected keyword argument 'ha...
[31mFAILED[0m tests/performance/test_full_performance_suite.py::[1mtest_benchmark_infer_type_performance[0m - TypeError: infer_cty_type_from_raw() got an unexpected keyword argument 'ha...
[31mFAILED[0m tests/performance/test_full_performance_suite.py::[1mtest_benchmark_validation_performance[0m - TypeError: infer_cty_type_from_raw() got an unexpected keyword argument 'ha...
[31mFAILED[0m tests/performance/test_full_performance_suite.py::[1mtest_benchmark_full_round_trip[0m - TypeError: infer_cty_type_from_raw() got an unexpected keyword argument 'ha...
[31m=============== [31m[1m3 failed[0m, [32m1 passed[0m, [33m1 warning[0m, [31m[1m3 errors[0m[31m in 1.99s[0m[31m ===============[0m
